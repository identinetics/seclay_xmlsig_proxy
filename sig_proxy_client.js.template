window.onload = do_signature_flow;
"use strict";

function do_signature_flow () {
    const ASYNC_FALSE = false;

    function fetch_unsigned_xml(url) {
        write_status("requesting unsigned XML document");
        let xhr = new XMLHttpRequest();
        xhr.open("GET", url, ASYNC_FALSE);
        xhr.send(null);
        if (xhr.status === 200) {
            write_status('Response OK, returned ' + xhr.responseText.length + ' characters');
            return xhr.responseText;
        } else throw {
            name: "clientcallback1",
            message: "HTTP" + xhr.status + " when requesting unsigned document from " + url
        };
    }

    function fetch_cresignedxml_request(url, unsignedxml, sigtype) {
        write_status("requesting CreateXMLSignatureRequest");
        let params = "sigtype=" + sigtype + "&unsignedxml=" + encodeURI(unsignedxml);
        let xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.send(params);
        if (xhr.status === 200) {
            write_status('Response OK, returned ' + xhr.responseText.length + ' characters');
            return xhr.responseText;
        } else throw {
            name: "proxycallback1",
            message: "HTTP " + xhr.status + " when requesting CreateXMLSignatureRequest from " + url
        };
    }

    function check_for_securitylayer_error(xmldoc) {
        // Security Layer reports an error as HTTP 200 , but with a different content XML doc
        const NS_SL = 'http://www.buergerkarte.at/namespaces/securitylayer/1.2#';
        let sl_err_elem = xmldoc.getElementsByTagNameNS(NS_SL,'ErrorCode');
        if (sl_err_elem.length > 0) {
            let sl_errcode = Array.from(sl_err_elem)[0].textContent;
            let sl_errmsg_elem = xmldoc.getElementsByTagNameNS(NS_SL, 'Info');
            let sl_errmsg = Array.from(sl_errmsg_elem)[0].textContent;
            let msg = 'Security Layer returned ' + sl_errcode + ' "' + sl_errmsg + '"';
            write_status(msg);
            throw {
                name: "SecurityLayer",
                message: msg
            };
        }
    }

    function security_layer_request(url, cresignedxml_requ) {
        write_status("requesting Signature from Security Layer");
        let params = "XMLRequest=" + encodeURIComponent(cresignedxml_requ);
        let xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.send(params);
        if (xhr.status !== 200)
            throw {name: "seclay", message: "Error when sending CreateXMLSignatureRequest to Security Layer"};
        check_for_securitylayer_error(xhr.responseXML);
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
        return xhr.responseText;
    }

    function fetch_signedxmldoc(url, cresignedxml_resp) {
        write_status("extracting signed XML doc from Security Layer response");
        let params = "sigresponse=" + encodeURI(cresignedxml_resp);
        let xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        try {
            xhr.send(params);
        } catch (e) {
            if (xhr.status === 204) {
                let sl_error = JSON.parse(xhr.responseText);
                throw sl_error;
            } else if (xhr.status !== 200) {
                throw {name: "proxycallback2", message: "HTTP " + xhr.status + "when requesting signed XML document from " + url};
            }
        }
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
        return xhr.responseText;
    }

    function post_result_to(url, signedxml) {
        write_status("posting signed XML doc to requesting application");
        let params = "signedxml=" + (signedxml);
        let xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.send(params);
        if (xhr.status !== 200) {
            throw {
                name: "clientcallback2",
                message: 'HTTP ' + xhr.status + ' (' + xhr.message + ') when posting signed xml to ' + url
            };
        }
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
    }

    function load_termination_page(url) {
        write_status("Signature Proxy/Browser Client says good bye");
        document.location = url;
    }

    function load_error_page(url, msg, err_params, messagebox) {
        let err_page =
            '<!DOCTYPE html><html lang="de">Security Layer Proxy<head/><body><h1>Signatur fehlgeschlagen: ' + msg + "</h1>" +
            messagebox.innerHTML +
            '<p><a href="' + url + err_params + '">Zur√ºck zur Anwendung</a></a</p>' +
            '</body></html>';
        document.open('text/html');
        document.write(err_page);
        document.close();
    }

    function write_status(msg) {
        console.log(msg);
        messagelist = messagelist + "<li>"+ msg + "</li>";
        messagebox.innerHTML = "<ul>" + messagelist + "</ul>";
    }


    let messagelist = "";
    let messagebox = document.getElementById("messages");
    let next_url = '';
    let err_params = '';
    try {
        next_url = "${unsignedxml_url}";
        let unsignedxml = fetch_unsigned_xml(next_url);
        next_url = "${make_cresigrequ_url}";
        let cresignedxml_requ = fetch_cresignedxml_request(next_url, unsignedxml, "${sigtype}");
        next_url = "${sigservice_url}";
        let cresignedxml_resp = security_layer_request(next_url, cresignedxml_requ);
        next_url = "${getsignedxmldoc_url}";
        let signedxml_resp = fetch_signedxmldoc(next_url, cresignedxml_resp);
        next_url = "${result_to}";
        post_result_to(next_url, signedxml_resp);
        load_termination_page("${return}" + err_params);
    } catch(err) {
        let msg = '';
        if (err.name === 'NetworkError') {
            msg = '(' + err.name + ') ' + err.message + ' \n' + next_url;
        } else {
            msg = '(' + err.name + ') ' + err.message;
        }
        write_status(msg);
        err_params = '?code=' + encodeURI(err.name) + "&msg=" + encodeURI(err.message);
        load_error_page("${return}", msg, err_params, messagebox);
    }
}
