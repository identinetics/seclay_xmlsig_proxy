window.onload = do_signature_flow;
"use strict";

function do_signature_flow () {
    const ASYNC_FALSE = false;
    const ERR_CLIENT_CALLBACK1 = {name: "clientcallback1", message: "Error when reading unsigned document from client application"};
    const ERR_CLIENT_CALLBACK2 = {name: "clientcallback2", message: "Error when returning signed document to client application"};
    const ERR_PROXY_CALLBACK2 = {name: "proxycallback2", message: "Error when requesting signed XML document from signature proxy"};
    const ERR_SECLAY = {name: "seclay", message: "Error when sending CreateXMLSignatureRequest to Security Layer"};

    function get_unsigned_xml(url) {
        write_status("reading unsigned XML document");
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, ASYNC_FALSE);
        xhr.send(null);
        if (xhr.status != 200) throw ERR_CLIENT_CALLBACK1;
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
        return xhr.responseText;
    }

    function get_cresignedxml_requ(url, unsignedxml, sigtype) {
        write_status("creatingCreateXMLSignatureRequest");
        var params = "sigtype=" + sigtype + "&unsignedxml=" + encodeURI(unsignedxml);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.send(params);
        if (xhr.status != 200)
            throw {name: "proxycallback1",
                   message: "Error when requesting CreateXMLSignatureRequest from signature proxy, http code=" + xhr.status};
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
        return xhr.responseText;
    }

    function handle_securitylayer_error(xmldoc) {
        // Security Layer reports an error as HTTP 200 , but with a different content XML doc
        const NS_SL = 'http://www.buergerkarte.at/namespaces/securitylayer/1.2#';
        var sl_err_elem = xmldoc.getElementsByTagNameNS(NS_SL,'ErrorCode');
        if (sl_err_elem.length > 0) {
            var sl_errcode = Array.from(sl_err_elem)[0].textContent;
            var sl_errmsg_elem = xmldoc.getElementsByTagNameNS(NS_SL, 'Info');
            var sl_errmsg = Array.from(sl_errmsg_elem)[0].textContent;
            msg = 'Security Layer failed, returned ' + sl_errcode + ' ' + sl_errmsg;
            write_status(msg);
            throw {
                name: "SecurityLayer",
                message: msg
            };
        }
    }

    function security_layer_request(url, cresignedxml_requ) {
        write_status("requesting Signature from Security Layer");
        var params = "XMLRequest=" + encodeURI(cresignedxml_requ);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhr.send(params);
        if (xhr.status != 200) throw ERR_SECLAY;
        handle_securitylayer_error(xhr.responseXML)
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
        return xhr.responseText;
    }

    function getsignedxmldoc(url, cresignedxml_resp) {
        write_status("extracting signed XML doc from Security Layer response");
        var params = "sigresponse=" + encodeURI(cresignedxml_resp);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        try {
            xhr.send(params);
        } catch (e) {
            if (xhr.status == 204) {
                var sl_error = JSON.parse(xhr.responseText);
                throw sl_error;
            } else if (xhr.status != 200) throw ERR_PROXY_CALLBACK2;
        }
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
        return xhr.responseText;
    }

    function post_result_to(url, signedxml) {
        write_status("posting signed XML doc to requesting application");
        var params = "signedxml=" + (signedxml);
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, ASYNC_FALSE);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        try {
            xhr.send(params);
        } catch (e) {
            throw ERR_CLIENT_CALLBACK2;
        }
        write_status('Response OK, returned ' +  xhr.responseText.length + ' characters');
    }

    function load_termination_page(url) {
        write_status("Signature Proxy/Browser Client says good bye");
        document.location = url;
    }

    function write_status(msg){
        console.log(msg);
        messagelist = messagelist + "<li>"+ msg + "</li>";
        messagebox.innerHTML = "<ul>" + messagelist + "</ul>";
    }

    var messagelist = "";
    var messagebox = document.getElementById("messages");
    try {
        var next_url = "${unsignedxml_url}";
        var unsignedxml = get_unsigned_xml(next_url);
        next_url = "${make_cresigrequ_url}";
        var cresignedxml_requ = get_cresignedxml_requ(next_url, unsignedxml, "${sigtype}");
        next_url = "${sigservice_url}";
        var cresignedxml_resp = security_layer_request(next_url, cresignedxml_requ);
        next_url = "${getsignedxmldoc_url}";
        var signedxml_resp = getsignedxmldoc(next_url, cresignedxml_resp);
        next_url = "${result_to}";
        post_result_to(next_url, signedxml_resp);
        var err_params = '';
    } catch(err) {
        var msg = '';
        if (err.name == 'NetworkError') {
            msg = '(' + err.name + ') ' + err.message + ' \n' + next_url;
        } else {
            msg = '(' + err.name + ') ' + err.message;
        }
        write_status(msg);
        setTimeout(Function.prototype, 5000);
        alert('The signature request could not be completed. \nReason: ' + msg);
        err_params = '?code=' + encodeURI(err.name) + "&msg=" + encodeURI(err.message);
    }
    load_termination_page("${return}" + err_params);
}
